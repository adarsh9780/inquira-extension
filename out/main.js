(()=>{"use strict";var e,n,t,o={181:e=>{e.exports=require("buffer")},857:e=>{e.exports=require("os")},1398:e=>{e.exports=require("vscode")},1708:e=>{e.exports=require("node:process")},1943:e=>{e.exports=require("fs/promises")},2018:e=>{e.exports=require("tty")},2203:e=>{e.exports=require("stream")},2613:e=>{e.exports=require("assert")},3106:e=>{e.exports=require("zlib")},3480:e=>{e.exports=require("querystring")},3839:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.SchemaManager=void 0;const o=t(6928),s=t(9896),a=t(7103);n.SchemaManager=class{constructor(){this.llmService=new a.LLMService}getSchemaPath(e){const n=o.dirname(e),t=o.basename(e,o.extname(e));return o.join(n,`${t}_schema.json`)}async generateSchema(e,n,t="gemini-1.5-flash",a){const i=await this.llmService.generateSchema(e,n,t,a),r=this.getSchemaPath(e),d=o.dirname(r);s.existsSync(d)||s.mkdirSync(d,{recursive:!0}),s.writeFileSync(r,JSON.stringify(i,null,2))}async loadSchema(e){const n=this.getSchemaPath(e);if(!s.existsSync(n))return null;try{const e=s.readFileSync(n,"utf8");return JSON.parse(e)}catch(e){return console.error("Error loading schema:",e),null}}async saveSchema(e,n){const t=this.getSchemaPath(e);s.writeFileSync(t,JSON.stringify(n,null,2))}}},4265:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.activate=function(e){console.log("Inquira extension is now active!");const n=new s.InquiraViewProvider(e.extensionUri);e.subscriptions.push(o.window.registerWebviewViewProvider(s.InquiraViewProvider.viewType,n)),e.subscriptions.push(o.commands.registerCommand("inquira.showView",()=>{o.commands.executeCommand("workbench.view.explorer")})),e.subscriptions.push(o.commands.registerCommand("inquira.openSettings",()=>{n.openSettings()})),e.subscriptions.push(o.commands.registerCommand("inquira.generateSchema",async()=>{await n.generateSchema()})),e.subscriptions.push(o.commands.registerCommand("inquira.viewSchema",()=>{n.viewSchema()}))},n.deactivate=function(){};const o=t(1398),s=t(7576)},4434:e=>{e.exports=require("events")},4756:e=>{e.exports=require("tls")},4876:e=>{e.exports=require("punycode")},5317:e=>{e.exports=require("child_process")},5323:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.CODE_GENERATION_PROMPT=n.SCHEMA_GENERATION_PROMPT=n.SYSTEM_INSTRUCTION=void 0,n.fillPrompts=function(e,n){let t=e;for(const[e,o]of Object.entries(n))t=t.replace(new RegExp(`\\{${e}\\}`,"g"),o);return t},n.SYSTEM_INSTRUCTION='\nYou are an expert data analysis assistant. When given a question you should:\n\n1. Determine if the question is safe to answer (is_safe)\n2. Determine if the question is relevant to data analysis (is_relevant)\n3. Generate appropriate Python code to answer the question (code)\n4. Provide a clear explanation in markdown format (explanation)\n\nThe code should be generated based on the following schema:\n{SCHEMA}\n\nPrefer to read only as much data as required to do the analysis (avoid loading whole data into memory, no matter what).\nUse DuckDB to achieve this. The data is stored in the following location:\n{DATA_PATH}\nOnce the required data is loaded by duckdb, feel free to use Pandas to achieve the final result. Basically, use DuckDB to load initial\ndata into the memory and use pandas to analyse the code. this is because, the user file could be very large and reading the whole data\ninto memory using pandas might take a long time or might not work at all.\n\n# Steps\n1. First based on the user ask, analyse how much data you need to load into memory\n2. use duckdb and write a SQL query to load the data. if the ask is simple you can use duckdb completely to achieve the task\n3. if the ask is not straight forward, make sure first to load the data into memory and then use pandas to do the further transformation\n4. Use ".query" to filter rows in pandas, if required\n5. Use ".assign" to create new column in pandas, if required\n6. Use chained operation as much as possible in pandas\n7. make sure all outputs are either: pandas dataframe, plotly figure or scalars and nothing else.\n\nReturn your response as a JSON object with these exact keys:\n- is_safe: boolean\n- is_relevant: boolean\n- code: string (Python code)\n- explanation: string (markdown formatted explanation) - step by step markdown format explanation of what code is doing to achieve the task\n',n.SCHEMA_GENERATION_PROMPT="\nYou will be provided a list of columns from a data file along with some context. Your task is to generate the schema information based on the provided information.\n\nContext: {CONTEXT}\n\nColumns: {COLUMNS}\n\nPlease generate a schema description for each column that explains what this column represents in the context of the provided domain knowledge. Return the schema as a JSON array of objects with 'name' and 'description' properties.\n",n.CODE_GENERATION_PROMPT="\n{SYSTEM_INSTRUCTION}\n\nQuestion: {QUESTION}\n\n{CURRENT_CODE_CONTEXT}\n\nSchema: {SCHEMA}\n"},5692:e=>{e.exports=require("https")},6928:e=>{e.exports=require("path")},6982:e=>{e.exports=require("crypto")},7016:e=>{e.exports=require("url")},7075:e=>{e.exports=require("node:stream")},7103:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.LLMService=void 0;const o=t(5323);n.LLMService=class{constructor(){this.ai=null}async generateCode(e,n,s,a="gemini-2.5-flash",i,r){const{GoogleGenAI:d,Type:c}=await Promise.resolve().then(()=>t(5885));this.ai||(this.ai=new d({apiKey:s}));const l={type:c.OBJECT,properties:{is_safe:{type:c.BOOLEAN},is_relevant:{type:c.BOOLEAN},code:{type:c.STRING},explanation:{type:c.STRING}}},p={SYSTEM_INSTRUCTION:o.SYSTEM_INSTRUCTION,QUESTION:e,CURRENT_CODE_CONTEXT:i?`\nExisting code in the file:\n${i}`:"",SCHEMA:JSON.stringify(n,null,2),DATA_PATH:r||""},u=(0,o.fillPrompts)(o.CODE_GENERATION_PROMPT,p),h=(await this.ai.models.generateContent({model:a,contents:u,config:{responseMimeType:"application/json",responseSchema:l}})).text||"";return JSON.parse(h)}async generateSchema(e,n,s="gemini-2.5-flash",a){const{GoogleGenAI:i,Type:r}=await Promise.resolve().then(()=>t(5885));this.ai||(this.ai=new i({apiKey:n}));const d={type:r.OBJECT,properties:{name:{type:r.STRING},description:{type:r.STRING}}},c={type:r.ARRAY,items:d},l={CONTEXT:a||"General data analysis",COLUMNS:(await this.getColumnNames(e)).join(", ")},p=(0,o.fillPrompts)(o.SCHEMA_GENERATION_PROMPT,l),u=(await this.ai.models.generateContent({model:s,contents:p,config:{responseMimeType:"application/json",responseSchema:c}})).text||"";return JSON.parse(u)}async getColumnNames(e){return this.getColumnNamesFallback(e)}async getColumnNamesFallback(e){try{const n=t(9896).readFileSync(e,"utf8").split("\n");return n.length>0?n[0].split(",").map(e=>e.trim().replace(/"/g,"")):[]}catch(e){return console.error("Error in fallback column name extraction:",e),[]}}}},7532:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.CodeInjector=void 0;const o=t(1398);n.CodeInjector=class{async insertCode(e){const n=o.window.activeTextEditor;if(!n)return void o.window.showErrorMessage("No active editor found");const t=n.document.languageId;"python"===t?await this.insertIntoPythonFile(n,e):"jupyter"===t?await this.insertIntoJupyterNotebook(n,e):o.window.showErrorMessage("Unsupported file type. Please open a Python file or Jupyter notebook.")}async insertIntoPythonFile(e,n){const t=e.document,s=t.lineCount-1,a=t.lineAt(s).text,i=new o.Position(s,a.length),r=new o.TextEdit(new o.Range(i,i),"\n\n"+n),d=new o.WorkspaceEdit;d.set(t.uri,[r]),await o.workspace.applyEdit(d);const c=new o.Position(s+2,0);e.selection=new o.Selection(c,c),e.revealRange(new o.Range(c,c))}async insertIntoJupyterNotebook(e,n){const t=o.workspace.notebookDocuments.find(n=>n.uri.toString()===e.document.uri.toString());if(!t)return void o.window.showErrorMessage("Could not find notebook document");const s=t.cellCount-1+1,a=new o.NotebookCellData(o.NotebookCellKind.Code,n,"python"),i=o.NotebookEdit.insertCells(s,[a]),r=new o.WorkspaceEdit;if(r.set(t.uri,[i]),await o.workspace.applyEdit(r),t.cellCount>s){const e=t.cellAt(s);e&&await o.window.showTextDocument(e.document,{selection:new o.Range(0,0,0,0)})}}}},7576:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.InquiraViewProvider=void 0;const o=t(1398),s=t(9896),a=t(6928),i=t(857),r=t(7103),d=t(3839),c=t(7532);class l{constructor(e){this._extensionUri=e,this._chatMessages=[],this._loadedMessages=0,this._totalMessages=0,this._isLoadingMore=!1,this._llmService=new r.LLMService,this._schemaManager=new d.SchemaManager,this._codeInjector=new c.CodeInjector}getSettingsPath(){const e=i.homedir(),n=a.join(e,".inquira");return s.existsSync(n)||s.mkdirSync(n,{recursive:!0}),a.join(n,"settings.json")}loadSettings(){const e=this.getSettingsPath();if(s.existsSync(e))try{const n=s.readFileSync(e,"utf8");return JSON.parse(n)}catch(e){console.error("Error loading settings:",e)}return{}}saveSettings(e){const n=this.getSettingsPath();try{s.writeFileSync(n,JSON.stringify(e,null,2))}catch(e){console.error("Error saving settings:",e)}}resolveWebviewView(e,n,t){console.log("Resolving webview view"),this._view=e,e.webview.options={enableScripts:!0,localResourceRoots:[this._extensionUri]},e.webview.html=this._getHtmlForWebview(e.webview),console.log("Webview HTML set"),this.updateMessageCount().then(()=>{this.loadMessages(4,0)}),e.webview.onDidReceiveMessage(async e=>{switch(console.log("Received message:",e),e.type){case"askQuestion":console.log("Processing askQuestion:",e.question),await this._handleQuestion(e.question);break;case"loadMoreMessages":!this._isLoadingMore&&this._loadedMessages<this._totalMessages&&(this._isLoadingMore=!0,await this.loadMessages(4,this._loadedMessages),this._isLoadingMore=!1);break;case"updateSettings":await this._updateSettings(e.apiKey,e.dataPath,e.context,e.model);break;case"requestSettings":const n=this.loadSettings();this._view?.webview.postMessage({type:"loadSettings",settings:n});break;case"generateSchema":await this._generateSchema();break;case"openSchema":this._openSchema();break;case"viewSchema":this._viewSchema();break;case"openFileDialog":const t=await o.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,defaultUri:o.workspace.workspaceFolders?.[0]?.uri,filters:{"Data Files":["csv","json","parquet"]}});t&&t[0]&&this._view?.webview.postMessage({type:"fileSelected",path:t[0].fsPath})}})}async _handleQuestion(e){try{const n=this.loadSettings(),t=n.apiKey||"",s=n.dataPath||"",a=n.modelName||"gemini-2.5-flash";if(!t)return void o.window.showErrorMessage("Please set your Google Gemini API key in settings");if(!s)return void o.window.showErrorMessage("Please set your data file path in settings");if(!this.loadSettings().hasSchema)return void o.window.showErrorMessage("Schema not generated. Please save settings first to generate schema.");const i=await this._schemaManager.loadSchema(s);if(!i)return void o.window.showErrorMessage("Schema not found. Please regenerate schema.");const r=await this.getCurrentFileContent(),d=await this._llmService.generateCode(e,i,t,a,r,s);if(this._chatMessages.push({timestamp:new Date,type:"user",content:e}),d.is_safe&&d.is_relevant)await this._codeInjector.insertCode(d.code),this._chatMessages.push({timestamp:new Date,type:"assistant",content:d.explanation,code:d.code,explanation:d.explanation}),this._view?.webview.postMessage({type:"response",code:d.code,explanation:d.explanation});else{const e=d.is_safe?"Question is not relevant to data analysis":"Question is not safe to answer";this._chatMessages.push({timestamp:new Date,type:"assistant",content:e}),this._view?.webview.postMessage({type:"error",message:e})}}catch(e){o.window.showErrorMessage(`Error: ${e}`),this._view?.webview.postMessage({type:"error",message:e instanceof Error?e.message:"Unknown error"})}}async generateSchema(e){const n=this.loadSettings(),t=n.dataPath||"",s=n.apiKey||"",a=n.context||"",i=e||n.modelName||"gemini-2.5-flash";if(t&&s)try{await this._schemaManager.generateSchema(t,s,i,a);const e=this.loadSettings();e.hasSchema=!0,this.saveSettings(e),o.window.showInformationMessage("Schema generated successfully")}catch(e){o.window.showErrorMessage(`Failed to generate schema: ${e}`)}else o.window.showErrorMessage("Please set data path and API key in settings first")}viewSchema(){const e=this.loadSettings().dataPath||"";if(!e)return void o.window.showErrorMessage("Please set data path in settings first");const n=this._schemaManager.getSchemaPath(e);o.workspace.openTextDocument(n).then(e=>{o.window.showTextDocument(e)})}_openSchema(){const e=this.loadSettings().dataPath||"";if(!e)return void o.window.showErrorMessage("Please set data path in settings first");const n=this._schemaManager.getSchemaPath(e);o.workspace.openTextDocument(n).then(e=>{o.window.showTextDocument(e)},e=>{o.window.showErrorMessage(`Failed to open schema file: ${e.message}`)})}async openSettings(){this._view?.webview.postMessage({type:"openSettings"})}async _generateSchema(){await this.generateSchema()}_viewSchema(){this.viewSchema()}async getCurrentFileContent(){try{const e=o.window.activeTextEditor;return e&&"python"===e.document.languageId?e.document.getText():""}catch(e){return console.error("Error getting current file content:",e),""}}async loadMessages(e=4,n=0){try{const t=this._chatMessages.slice(-e-n,-n||void 0).reverse();this._loadedMessages=Math.max(this._loadedMessages,n+t.length),this._view?.webview.postMessage({type:"loadMessages",messages:t,hasMore:this._loadedMessages<this._totalMessages})}catch(e){console.error("Error loading messages:",e)}}async updateMessageCount(){try{this._totalMessages=this._chatMessages.length}catch(e){console.error("Error getting message count:",e)}}async _updateSettings(e,n,t,s){const a=this.loadSettings();if(e&&(a.apiKey=e),n&&(a.dataPath=n),t&&(a.context=t),s&&(a.modelName=s),this.saveSettings(a),n&&e)try{await this.generateSchema(s),this._view?.webview.postMessage({type:"settingsUpdated"})}catch(e){o.window.showErrorMessage(`Failed to generate schema: ${e}`),this._view?.webview.postMessage({type:"settingsUpdated"})}else this._view?.webview.postMessage({type:"settingsUpdated"})}_getHtmlForWebview(e){return function(){let e="";const n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let t=0;t<32;t++)e+=n.charAt(Math.floor(62*Math.random()))}(),`<!DOCTYPE html>\n            <html lang="en">\n            <head>\n                <meta charset="UTF-8">\n                <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src 'unsafe-inline'; script-src 'unsafe-inline' vscode-resource:;">\n                <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                <title>Inquira</title>\n                <style>\n                    html, body {\n                        height: 100%;\n                        margin: 0;\n                        padding: 0;\n                        overflow: hidden;\n                    }\n                </style>\n            </head>\n            <body>\n                <div class="container">\n                    <div class="header">\n                        <span class="robot-icon">🤖</span>\n                        <h3>Inquira</h3>\n                        <div class="header-buttons">\n                            <button id="schemaButton" title="View Schema">👁️</button>\n                            <button id="settingsButton" title="Settings">⚙️</button>\n                        </div>\n                    </div>\n\n                    <div id="settingsModal" class="modal">\n                        <div class="modal-content">\n                            <div class="modal-header">\n                                <h3>Settings</h3>\n                                <button id="closeSettings" class="close-button" title="Close">×</button>\n                            </div>\n                            <form class="settings-form">\n                                <div class="form-group">\n                                    <label for="apiKey">Google Gemini API Key</label>\n                                    <input type="password" id="apiKey" placeholder="Enter your API key" />\n                                </div>\n                                <div class="form-group">\n                                    <label for="dataPath">Data File Path</label>\n                                    <div style="display: flex; gap: 8px;">\n                                        <input type="text" id="dataPath" placeholder="/path/to/your/data.csv" style="flex: 1;" />\n                                        <button type="button" id="browseDataPath" class="btn btn-secondary" style="padding: 8px 12px;">Browse</button>\n                                    </div>\n                                </div>\n                                <div class="form-group">\n                                    <label for="context">Data Context (Optional)</label>\n                                    <textarea id="context" placeholder="Describe your data..."></textarea>\n                                </div>\n                                <div class="form-group">\n                                    <label for="model">Model</label>\n                                    <select id="model">\n                                        <option value="gemini-2.5-flash">gemini-2.5-flash</option>\n                                        <option value="gemini-2.5-flash-lite">gemini-2.5-flash-lite</option>\n                                    </select>\n                                </div>\n                                <div class="button-group">\n                                    <button type="button" id="cancelSettings" class="btn btn-secondary">Cancel</button>\n                                    <button type="submit" id="saveSettings" class="btn btn-primary">Save Settings</button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n\n                    <div id="mainContent" class="main-content">\n                        <div id="messages" class="messages"></div>\n                        <div class="input-container">\n                            <textarea id="questionInput" placeholder="Ask a question about your data..." rows="3"></textarea>\n                            <div class="input-row">\n                                <button id="askButton">Ask ➤</button>\n                                <div id="thinkingSpinner" class="thinking-spinner" style="display: none;">\n                                    <span class="spinner">⏳</span> Assistant is thinking...\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <style>\n            .container {\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n                font-family: var(--vscode-font-family);\n                background-color: var(--vscode-editor-background);\n                color: var(--vscode-editor-foreground);\n            }\n            .header {\n                padding: 10px;\n                border-bottom: 1px solid var(--vscode-panel-border);\n                background-color: var(--vscode-titleBar-activeBackground);\n                display: flex;\n                align-items: center;\n            }\n            .robot-icon {\n                font-size: 18px;\n                margin-right: 8px;\n            }\n            .header {\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n            }\n            .header h3 {\n                margin: 0;\n                font-size: 14px;\n                font-weight: 600;\n            }\n            .header-buttons {\n                display: flex;\n                gap: 4px;\n            }\n            #schemaButton, #settingsButton {\n                background: none;\n                border: none;\n                color: var(--vscode-foreground);\n                cursor: pointer;\n                font-size: 14px;\n                padding: 4px;\n                border-radius: 3px;\n            }\n            #schemaButton:hover, #settingsButton:hover {\n                background-color: var(--vscode-toolbar-hoverBackground);\n            }\n            .modal {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background-color: var(--vscode-editor-background);\n                z-index: 1000;\n                display: none;\n            }\n            .modal-content {\n                padding: 20px;\n                height: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n            .modal-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 20px;\n                padding-bottom: 10px;\n                border-bottom: 1px solid var(--vscode-panel-border);\n            }\n            .modal-header h3 {\n                margin: 0;\n                font-size: 16px;\n                font-weight: 600;\n            }\n            .close-button {\n                background: none;\n                border: none;\n                color: var(--vscode-foreground);\n                cursor: pointer;\n                font-size: 18px;\n                padding: 4px 8px;\n                border-radius: 3px;\n            }\n            .close-button:hover {\n                background-color: var(--vscode-toolbar-hoverBackground);\n            }\n            .settings-form {\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                gap: 15px;\n            }\n            .form-group {\n                display: flex;\n                flex-direction: column;\n                gap: 5px;\n            }\n            .form-group label {\n                font-size: 12px;\n                font-weight: 600;\n                color: var(--vscode-foreground);\n            }\n            .form-group input, .form-group textarea {\n                width: 100%;\n                padding: 8px 12px;\n                border: 1px solid var(--vscode-input-border);\n                background-color: var(--vscode-input-background);\n                color: var(--vscode-input-foreground);\n                border-radius: 4px;\n                font-size: 13px;\n            }\n            .form-group input:focus, .form-group textarea:focus {\n                outline: none;\n                border-color: var(--vscode-focusBorder);\n            }\n            .form-group textarea {\n                height: 80px;\n                resize: vertical;\n                min-height: 60px;\n                max-height: 120px;\n            }\n            .button-group {\n                display: flex;\n                justify-content: flex-end;\n                gap: 10px;\n                margin-top: 20px;\n            }\n            .btn {\n                padding: 8px 16px;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                font-size: 13px;\n                font-weight: 500;\n            }\n            .btn-primary {\n                background-color: var(--vscode-button-background);\n                color: var(--vscode-button-foreground);\n            }\n            .btn-primary:hover {\n                background-color: var(--vscode-button-hoverBackground);\n            }\n            .btn-secondary {\n                background-color: var(--vscode-button-secondaryBackground);\n                color: var(--vscode-button-secondaryForeground);\n            }\n            .btn-secondary:hover {\n                background-color: var(--vscode-button-secondaryHoverBackground);\n            }\n            .main-content {\n                position: relative;\n                height: 100%;\n            }\n            .main-content.hidden {\n                display: none;\n            }\n            .message-text {\n                line-height: 1.5;\n                width: 100%;\n                box-sizing: border-box;\n            }\n            .message-text h1, .message-text h2, .message-text h3 {\n                margin: 8px 0 4px 0;\n                font-weight: 600;\n                color: var(--vscode-foreground);\n            }\n            .message-text h1 {\n                font-size: 18px;\n            }\n            .message-text h2 {\n                font-size: 16px;\n            }\n            .message-text h3 {\n                font-size: 14px;\n            }\n            .message-text p {\n                margin: 4px 0;\n            }\n            .message-text strong {\n                font-weight: 600;\n            }\n            .message-text em {\n                font-style: italic;\n            }\n            .message-text .code-block {\n                background-color: var(--vscode-textCodeBlock-background);\n                border: 1px solid var(--vscode-textCodeBlock-border, var(--vscode-panel-border));\n                border-radius: 4px;\n                padding: 12px;\n                margin: 8px 0;\n                font-family: var(--vscode-editor-font-family, 'Monaco', 'Menlo', 'Ubuntu Mono', monospace);\n                font-size: 12px;\n                overflow-x: auto;\n                white-space: pre;\n            }\n            .message-text .code-block code {\n                background: none;\n                border: none;\n                padding: 0;\n                font-family: inherit;\n                font-size: inherit;\n            }\n            .message-text .inline-code {\n                background-color: var(--vscode-textCodeBlock-background);\n                border: 1px solid var(--vscode-textCodeBlock-border, var(--vscode-panel-border));\n                border-radius: 3px;\n                padding: 2px 4px;\n                font-family: var(--vscode-editor-font-family, 'Monaco', 'Menlo', 'Ubuntu Mono', monospace);\n                font-size: 11px;\n            }\n            .message-text br {\n                content: '';\n                display: block;\n                margin: 4px 0;\n            }\n            .messages {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 140px; /* Leave space for input area (increased for better spacing) */\n                padding: 10px;\n                overflow-y: auto;\n                overflow-x: hidden;\n                box-sizing: border-box;\n            }\n            .input-container {\n                position: absolute;\n                bottom: 0;\n                left: 0;\n                right: 0;\n                background-color: var(--vscode-input-background);\n                border-top: 1px solid var(--vscode-panel-border);\n                padding: 12px;\n                display: flex;\n                flex-direction: column;\n                gap: 8px;\n            }\n            .message {\n                margin-bottom: 10px;\n                padding: 8px 12px;\n                border-radius: 4px;\n                width: 100%;\n                box-sizing: border-box;\n            }\n            .message.user {\n                background-color: var(--vscode-button-background);\n                color: var(--vscode-button-foreground);\n                align-self: flex-end;\n                margin-left: auto;\n                max-width: 80%;\n                align-self: flex-end;\n            }\n            .message.assistant {\n                background: none;\n                border: none;\n                padding: 0;\n            }\n            .input-row {\n                display: flex;\n                align-items: flex-end;\n                gap: 8px;\n            }\n            #questionInput {\n                flex: 1;\n                padding: 10px 14px;\n                border: 1px solid var(--vscode-input-border);\n                border-radius: 6px;\n                background-color: var(--vscode-input-background);\n                color: var(--vscode-input-foreground);\n                font-size: 14px;\n                font-family: var(--vscode-font-family);\n                resize: vertical;\n                min-height: 60px;\n                max-height: 120px;\n                line-height: 1.4;\n            }\n            #questionInput:focus {\n                outline: none;\n                border-color: var(--vscode-focusBorder);\n            }\n            #askButton {\n                margin-left: 10px;\n                padding: 10px 18px;\n                background-color: var(--vscode-button-background);\n                color: var(--vscode-button-foreground);\n                border: none;\n                border-radius: 6px;\n                cursor: pointer;\n                font-size: 14px;\n                display: flex;\n                align-items: center;\n            }\n            #askButton:hover {\n                background-color: var(--vscode-button-hoverBackground);\n            }\n            #askButton:disabled {\n                opacity: 0.6;\n                cursor: not-allowed;\n            }\n            .thinking-spinner {\n                margin-left: 10px;\n                color: var(--vscode-descriptionForeground);\n                font-size: 12px;\n                display: flex;\n                align-items: center;\n                gap: 5px;\n            }\n            .spinner {\n                animation: spin 1s linear infinite;\n            }\n            @keyframes spin {\n                from { transform: rotate(0deg); }\n                to { transform: rotate(360deg); }\n            }\n        </style>\n                <script src="${e.asWebviewUri(o.Uri.joinPath(this._extensionUri,"media","webview.js"))}"><\/script>\n            </body>\n            </html>`}}n.InquiraViewProvider=l,l.viewType="inquiraview"},7975:e=>{e.exports=require("node:util")},8474:e=>{e.exports=require("node:events")},8611:e=>{e.exports=require("http")},9023:e=>{e.exports=require("util")},9278:e=>{e.exports=require("net")},9896:e=>{e.exports=require("fs")}},s={};function a(e){var n=s[e];if(void 0!==n)return n.exports;var t=s[e]={exports:{}};return o[e].call(t.exports,t,t.exports,a),t.exports}a.m=o,a.x=()=>{var e=a.O(void 0,[96],()=>a(4265));return a.O(e)},e=[],a.O=(n,t,o,s)=>{if(!t){var i=1/0;for(l=0;l<e.length;l++){for(var[t,o,s]=e[l],r=!0,d=0;d<t.length;d++)(!1&s||i>=s)&&Object.keys(a.O).every(e=>a.O[e](t[d]))?t.splice(d--,1):(r=!1,s<i&&(i=s));if(r){e.splice(l--,1);var c=o();void 0!==c&&(n=c)}}return n}s=s||0;for(var l=e.length;l>0&&e[l-1][2]>s;l--)e[l]=e[l-1];e[l]=[t,o,s]},a.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return a.d(n,{a:n}),n},a.d=(e,n)=>{for(var t in n)a.o(n,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce((n,t)=>(a.f[t](e,n),n),[])),a.u=e=>"vendors.js",a.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t={792:1},a.O.require=e=>t[e],a.f.require=(e,n)=>{if(!t[e]){var o=require("./"+a.u(e));t[e]||(e=>{var n=e.modules,o=e.ids,s=e.runtime;for(var i in n)a.o(n,i)&&(a.m[i]=n[i]);s&&s(a);for(var r=0;r<o.length;r++)t[o[r]]=1;a.O()})(o)}},n=a.x,a.x=()=>(a.e(96),n());var i=a.x();module.exports=i})();